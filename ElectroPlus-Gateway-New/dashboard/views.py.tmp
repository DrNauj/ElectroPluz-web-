@login_required
@staff_required
def category_list(request):
    if not (request.user.is_superuser or 
            has_role_permission(request.user, 'view_all')):
        raise PermissionDenied

    categories = (Category.objects
        .annotate(product_count=Count('products', filter=Q(products__is_active=True)))
        .order_by('name'))

    return render(request, 'dashboard/categories/list.html', {
        'categories': categories,
        'can_edit': has_role_permission(request.user, 'edit_all')
    })

@login_required
@staff_required
def category_create(request):
    if not (request.user.is_superuser or 
            has_role_permission(request.user, 'edit_all')):
        raise PermissionDenied

    if request.method == 'POST':
        try:
            name = request.POST.get('name', '').strip()
            description = request.POST.get('description', '').strip()

            if not name:
                return JsonResponse({
                    'success': False,
                    'error': 'El nombre de la categoría es requerido'
                }, status=400)

            # Verificar nombre único
            if Category.objects.filter(name__iexact=name).exists():
                return JsonResponse({
                    'success': False,
                    'error': 'Ya existe una categoría con este nombre'
                }, status=400)

            category = Category.objects.create(
                name=name,
                description=description,
                slug=slugify(name)
            )

            return JsonResponse({
                'success': True,
                'id': category.id,
                'name': category.name
            })

        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=400)

    return render(request, 'dashboard/categories/form.html')

@login_required
@staff_required
def category_edit(request, pk):
    if not (request.user.is_superuser or 
            has_role_permission(request.user, 'edit_all')):
        raise PermissionDenied

    category = get_object_or_404(Category, pk=pk)

    if request.method == 'POST':
        try:
            name = request.POST.get('name', '').strip()
            description = request.POST.get('description', '').strip()

            if not name:
                return JsonResponse({
                    'success': False,
                    'error': 'El nombre de la categoría es requerido'
                }, status=400)

            # Verificar nombre único excluyendo la categoría actual
            if Category.objects.filter(name__iexact=name).exclude(pk=pk).exists():
                return JsonResponse({
                    'success': False,
                    'error': 'Ya existe una categoría con este nombre'
                }, status=400)

            category.name = name
            category.description = description
            if category.name != name:  # Solo actualizar slug si cambió el nombre
                category.slug = slugify(name)
            category.save()

            return JsonResponse({
                'success': True,
                'name': category.name
            })

        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=400)

    return render(request, 'dashboard/categories/form.html', {
        'category': category
    })

@login_required
@staff_required
def category_delete(request, pk):
    if not (request.user.is_superuser or 
            has_role_permission(request.user, 'edit_all')):
        raise PermissionDenied

    category = get_object_or_404(Category, pk=pk)

    if request.method == 'POST':
        try:
            # Verificar que no haya productos activos
            if category.products.filter(is_active=True).exists():
                return JsonResponse({
                    'success': False,
                    'error': 'No se puede eliminar una categoría con productos activos'
                }, status=400)

            category.delete()
            return JsonResponse({
                'success': True,
                'message': 'Categoría eliminada correctamente'
            })

        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)

    return JsonResponse({
        'success': False,
        'error': 'Método no permitido'
    }, status=405)